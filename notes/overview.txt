
VAO stores list of attributes and their VBOs and indirect buffers

Different program calls can share VAOs.
Different VAOs can share VBOs. Primarily, different VAOs may use the same attributes but different indirect buffers.
Element buffers have low priority.
Primitive arrays may not share attributes.
Attribute packs can be introduced later.
Since increasing the size of a buffer requires updating the VAO it is not supported by the low level objects. The objects have to be re-created.
Low-level objects should put no limitations on its parameters. E.g. instead of requiring a slist of attributes it should only require the parameters needed to create a VAO. Higher-level objects can create temporary objects to fill the parameters of low-level ones or implement the low-level functionality themselves.

A primitive_array should be able to store different meshes. Where are the primitive ranges belonging to a mesh stored? Adding primitives to a mesh requires updating all its occurences in indirect buffers. This shouldn't be handled by the low-level objects.
The indirect buffer is a kind of attribute array too but with a fixed format. It would be nice if it could be accessed with the same API.
How can a API using structs be implemented? It would be nice if we could avoid creating attribute values as they are implicitly known through the struct. Having attributes be virtual should be avoided too. The *vertex_array objects need to know the attribute properties to create the VAO. The attributes could be stored on the heap instead. This may need slightly less memory and dynamic allocations aren't that expensive for something that is only allocated once.



attribute_pack
    vbo
    stride
    attributes[]
        offset

    upload(first, span data)

attribute_array
    size (const)
    attribute_packs[]

primitive_array
    allows copying primitives into the VBOs

    GLenum type
    attribute_array

vertex_array
    primitive_array
    first
    count
    unique_vao

indirect_vertex_array
    primitive_array primitives
    attribute_array instances
    indirect_buffer
    first
    count
    unique_vao
